{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import combinations\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import dcor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flatten(tup):\n",
    "    \"\"\" \n",
    "    Flatten any nested tuple\n",
    "    \"\"\"\n",
    "    if len(tup) < 1:\n",
    "        return tup \n",
    "    if isinstance(tup[0], tuple):\n",
    "        return flatten(tup[0]) + flatten(tup[1:])\n",
    "    return tup[:1] + flatten(tup[1:])\n",
    "\n",
    "\n",
    "def calc_shapley_value(player_index, all_players, cf_dict):\n",
    "    \"\"\"\n",
    "    Calculate the Shapley value for player index\n",
    "    Input:\n",
    "        all_players, list of player indices\n",
    "        cf_dict, dictionary containing characteristic function values for all players\n",
    "    \"\"\"\n",
    "    players = all_players.copy()\n",
    "\n",
    "    if player_index in players:\n",
    "        players.remove(player_index)\n",
    "\n",
    "    num_players = len(players)\n",
    "    coalition_sizes = list(range(num_players+1))\n",
    "    value = 0\n",
    "    player_tuple = (player_index,)\n",
    "\n",
    "    for _size in coalition_sizes:\n",
    "        coalition_value = 0\n",
    "        coalitions_of_size_s = list(combinations(players, _size))\n",
    "        for _coalition in coalitions_of_size_s:\n",
    "            value_in_coalition = (cf_dict[tuple(sorted(_coalition + player_tuple))] - cf_dict[_coalition])\n",
    "            coalition_value += value_in_coalition\n",
    "\n",
    "        average_coalition_value = coalition_value/len(coalitions_of_size_s)\n",
    "        value += average_coalition_value\n",
    "    average_value = value/len(coalition_sizes)\n",
    "\n",
    "    return average_value\n",
    "\n",
    "def calc_shapley_values(x, y, cf_dict):\n",
    "    \"\"\"\n",
    "    Returns the shapley values for features x and labels y, given a\n",
    "    characteristic function (default dcor)\n",
    "    \"\"\"\n",
    "    \n",
    "    players = list(range(x.shape[1]))\n",
    "    shapley_values = []\n",
    "    for _player in players:\n",
    "        shapley_values.append(calc_shapley_value(_player, players, cf_dict))\n",
    "    return shapley_values\n",
    "\n",
    "def make_cf_dict(x, y, characteristic_function):\n",
    "    \"\"\" \n",
    "    Creates dictionary with values of the characteristic function for each\n",
    "    combination of the players.\n",
    "    \"\"\"\n",
    "    cf_dict = {}\n",
    "    num_players = x.shape[1]\n",
    "    players = list(range(num_players))\n",
    "    coalition_sizes = list(range(num_players+1))\n",
    "\n",
    "    for _size in coalition_sizes:\n",
    "        coalitions_of_size_s = list(combinations(players, _size))\n",
    "        for _coalition in coalitions_of_size_s:\n",
    "            _coalition = tuple(sorted(flatten(_coalition)))\n",
    "            cf_dict[_coalition] = characteristic_function(x, y, _coalition)\n",
    "\n",
    "    return cf_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Explaining data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cab sharing example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "players = [1,2,3]\n",
    "cf_dict = {():0, (1,):3, (2,):7, (3,):10, (1,2):7, (1,3):10, (2,3):10, (1,2,3):10}\n",
    "print(calc_shapley_value(1, players, cf_dict))\n",
    "print(calc_shapley_value(2, players, cf_dict))\n",
    "print(calc_shapley_value(3, players, cf_dict))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1 (Shapley values for cats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Just do it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boston Housing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "boston = load_boston()\n",
    "#print(boston.keys()) # print all keys\n",
    "#print(boston.DESCR) # print feature descriptions\n",
    "#print(boston.feature_names) # print all feature names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston_dataset = pd.DataFrame(boston.data, columns=boston.feature_names)\n",
    "boston_dataset['MEDV'] =  boston.target\n",
    "\n",
    "#features_to_use = [\"RM\", \"AGE\", \"TAX\", \"CRIM\", \"PTRATIO\"]\n",
    "features_to_use = boston.feature_names\n",
    "x_data = np.array(boston_dataset[features_to_use])\n",
    "y_data = np.array(boston_dataset.MEDV)\n",
    "#print(x_data.shape)\n",
    "#print(y_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def characteristic_function_r2(x, y, coalition):\n",
    "    \"\"\"\n",
    "    Returns the characteristic function value (currently the coefficient of determination)\n",
    "    Input:\n",
    "        x, numpy array shape (#samples, #features)        \n",
    "        y, numpy array shape (#samples, )\n",
    "        coalition, tuple of indices of features to include\n",
    "    \"\"\"\n",
    "    if len(coalition)==0:\n",
    "        return 0.0\n",
    "    x = x[:, coalition]\n",
    "    \n",
    "    # --- Coefficient of determination, R2\n",
    "    det_C_xy = np.linalg.det(np.corrcoef(x.T, y))\n",
    "    if len(coalition)==1:\n",
    "        det_C_x = 1\n",
    "    else:\n",
    "        det_C_x = np.linalg.det(np.corrcoef(x.T))\n",
    "\n",
    "    return (1 - det_C_xy/det_C_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cf_dict_R2 = make_cf_dict(x_data, y_data, characteristic_function_r2)\n",
    "#print(cf_dict_R2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2: What is the Shapley value for AGE? (Leaving the characteristic function RÂ²)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Just do it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 3: What is the Shapley value for AGE, using another characteristic function?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def characteristic_function_dcor(x, y, coalition):\n",
    "    if len(coalition)==0:\n",
    "        return 0.0\n",
    "\n",
    "    x = x[:, coalition]\n",
    "    \n",
    "    # --- Distance correlation in here, pls\n",
    "    # Remove\n",
    "    return dcor.distance_correlation(x,y)\n",
    "    return None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Explaining a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.33, random_state=42)\n",
    "\n",
    "# Train an XGBoost Regressor to predict price (MEDV = median value in 1000$)\n",
    "regressor = xgboost.XGBRegressor()\n",
    "# Fit the model\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate predictions from the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate cf_dict on x_test and y_test using whichever characteristic function you like\n",
    "# Use this to calculate Shapley values for targets\n",
    "shapley_values_targets ="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate cf_dict on x_test and y_pred using whichever characteristic function you like\n",
    "# Use this to calculate Shapley values for predictions\n",
    "shapley_values_preds ="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_shapley_comparison(values_0, values_1,feature_names=None, nametags=[0,1]):\n",
    "    assert len(values_0) == len(values_1)\n",
    "    num = range(1,len(values_0)+1)\n",
    "    colors = [\"blue\", \"pink\"]\n",
    "    \n",
    "    for _n, _values in enumerate([values_0, values_1]):\n",
    "        _col = colors[_n]\n",
    "        plt.scatter(num,_values,c=_col,marker='s',alpha=0.7,label=f\"Shapley values {nametags[_n]}\")\n",
    "\n",
    "    plt.ylabel(\"Shapley decomposition\")\n",
    "    plt.legend()\n",
    "    if feature_names is not None:\n",
    "        ax = plt.gca()\n",
    "        ax.set_xticks(num)\n",
    "        ax.set_xticklabels(feature_names,rotation=45)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_shapley_comparison(shapley_values_targets, shapley_values_preds, features_to_use, [\"target\", \"pred\"])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
